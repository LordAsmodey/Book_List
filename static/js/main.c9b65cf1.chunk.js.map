{"version":3,"sources":["api/api.ts","Components/EditBookForm/EditBookForm.tsx","Components/Loader/Loader.tsx","Components/Dashboard/Dashboard.tsx","Components/InputField/InputField.tsx","Components/AddBookForm/AddBookForm.tsx","Components/PageNotFound/PageNotFound.tsx","App.tsx","index.tsx"],"names":["BASE_URL","EditBookForm","props","setBooks","book","editedBook","setEditedBook","useState","isHasEmptyFields","setIsHasEmptyFields","isLoading","setIsLoading","isError","setIsError","emptyFieldsHandler","field","trim","length","formSubmitHandler","fetch","id","method","headers","body","JSON","stringify","then","res","ok","json","Error","editBook","prev","filter","item","catch","finally","className","cn","type","aria-label","onClick","onSubmit","event","preventDefault","htmlFor","title","placeholder","value","onChange","target","required","authorName","category","ISBN","disabled","Loader","data-cy","Dashboard","books","isDeleteLoading","setIsDeleteLoading","useEffect","deleteBookHandler","deleteBook","prevState","map","InputField","name","label","Math","random","toString","slice","touched","setTouched","hasError","classNames","onBlur","AddBookForm","setTitle","setAuthorName","setCategory","setISBN","wasAdded","setWasAdded","useMemo","clearForm","to","replace","PageNotFound","App","location","useLocation","pathname","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9b65cf1.chunk.js","sourcesContent":["import { addedBook, Book } from './Types/Book';\n\nconst BASE_URL = 'http://localhost:4000/books';\n\nexport function getBooks(): Promise<Book[]> {\n  return fetch(`${BASE_URL}`)\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw new Error('Something went wrong');\n    });\n}\n\nexport function editBook(book: Book): Promise<Book> {\n  return fetch(`${BASE_URL}/${book.id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8',\n    },\n    body: JSON.stringify(book),\n  })\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw new Error('Something went wrong');\n    });\n}\n\nexport function addBook(book: addedBook): Promise<Book> {\n  return fetch(`${BASE_URL}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8',\n    },\n    body: JSON.stringify(book),\n  })\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw new Error('Something went wrong');\n    });\n}\n\nexport function deleteBook(id: number): Promise<Book> {\n  return fetch(`${BASE_URL}/${id}`, {\n    method: 'DELETE',\n  })\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw new Error('Something went wrong');\n    });\n}\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { Book } from '../../api/Types/Book';\nimport { editBook } from '../../api/api';\n\ntype Props = {\n  setBooks: CallableFunction,\n  editedBook: Book | null,\n  setEditedBook: CallableFunction,\n};\n\nexport const EditBookForm: React.FC<Props> = (props) => {\n  const {\n    setBooks,\n    editedBook: book,\n    setEditedBook,\n  } = props;\n\n  const [isHasEmptyFields, setIsHasEmptyFields] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const emptyFieldsHandler = (field: string) => {\n    if (field.trim().length === 0) {\n      setIsHasEmptyFields(true);\n    } else {\n      setIsHasEmptyFields(false);\n    }\n  };\n\n  const formSubmitHandler = () => {\n    setIsLoading(true);\n    if (book && !isHasEmptyFields) {\n      editBook(book)\n        .then((res) => {\n          setIsError(false);\n          setEditedBook(null);\n          setBooks((prev: Book[]) => (\n            [...prev.filter(item => item.id !== res.id),\n              res,\n            ]\n          ));\n        })\n        .catch(() => setIsError(true))\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  };\n\n  return (\n    <div className={cn('modal', { 'is-active': book })}>\n      <div className=\"modal-background\"></div>\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <p className=\"modal-card-title\">Edit book form</p>\n          <button\n            type=\"button\"\n            className=\"delete\"\n            aria-label=\"close\"\n            onClick={() => setEditedBook(null)}\n          >\n          </button>\n        </header>\n        <section className=\"modal-card-body\">\n          {isError && (\n            <p className=\"help is-danger\">\n              Something went wrong! Try again!\n            </p>\n          )}\n          <form onSubmit={(event) => {\n            event.preventDefault();\n            formSubmitHandler();\n          }}\n          >\n            <label className=\"label\" htmlFor=\"book-title\">\n              Enter book title:\n              <input\n                id=\"book-title\"\n                type=\"text\"\n                className={cn('input',\n                  { 'is-danger': book?.title.length === 0 })}\n                placeholder=\"Enter book title\"\n                value={book?.title || ''}\n                onChange={(event) => {\n                  emptyFieldsHandler(event.target.value);\n                  setEditedBook((prev: Book) => ({\n                    ...prev,\n                    title: event.target.value,\n                  }));\n                }}\n                required\n              />\n              {!book?.title.length && (\n                <p className=\"help is-danger\">Please enter book title!</p>\n              )}\n            </label>\n            <label htmlFor=\"author-name\">\n              Enter author name:\n              <input\n                id=\"author-name\"\n                type=\"text\"\n                className={cn('input',\n                  { 'is-danger': book?.authorName.length === 0 })}\n                placeholder=\"Enter author name\"\n                value={book?.authorName || ''}\n                onChange={(event) => {\n                  emptyFieldsHandler(event.target.value);\n                  setEditedBook((prev: Book) => ({\n                    ...prev,\n                    authorName: event.target.value,\n                  }));\n                }}\n                required\n              />\n              {!book?.authorName.length && (\n                <p className=\"help is-danger\">Please enter author name!</p>\n              )}\n            </label>\n            <div className=\"field\">\n              <label htmlFor=\"category\" className=\"label\">\n                Select category\n                <div className=\"control\">\n                  <div className=\"select\">\n                    <select\n                      id=\"category\"\n                      value={book?.category}\n                      onChange={(event) => {\n                        setEditedBook((prev: Book) => ({\n                          ...prev,\n                          category: event.target.value,\n                        }));\n                      }}\n                    >\n                      <option>Politics</option>\n                      <option>Fantasy</option>\n                      <option>Autobiography</option>\n                      <option>Romance</option>\n                    </select>\n                  </div>\n                </div>\n              </label>\n            </div>\n            <label htmlFor=\"ISBN\">\n              Enter ISBN:\n              <input\n                id=\"ISBN\"\n                type=\"text\"\n                className={cn('input',\n                  { 'is-danger': book?.ISBN.length === 0 })}\n                placeholder=\"Enter ISBN\"\n                value={book?.ISBN || ''}\n                onChange={(event) => {\n                  emptyFieldsHandler(event.target.value);\n                  setEditedBook((prev: Book) => ({\n                    ...prev,\n                    ISBN: event.target.value,\n                  }));\n                }}\n                required\n              />\n              {!book?.ISBN.length && (\n                <p className=\"help is-danger\">Please enter book ISBN!</p>\n              )}\n            </label>\n          </form>\n        </section>\n        <footer className=\"modal-card-foot\">\n          <button\n            type=\"button\"\n            className={cn('button is-success', { 'is-loading': isLoading })}\n            onClick={formSubmitHandler}\n            disabled={isHasEmptyFields}\n          >\n            Save changes\n          </button>\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setEditedBook(null)}\n          >\n            Cancel\n          </button>\n        </footer>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { deleteBook, getBooks } from '../../api/api';\nimport { Book } from '../../api/Types/Book';\nimport { EditBookForm } from '../EditBookForm/EditBookForm';\nimport { Loader } from '../Loader/Loader';\n\nexport const Dashboard: React.FC = () => {\n  const [books, setBooks] = useState<Book[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDeleteLoading, setIsDeleteLoading] = useState(false);\n  const [editedBook, setEditedBook] = useState<Book | null>(null);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getBooks()\n      .then(res => {\n        setBooks(res);\n        setIsError(false);\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const deleteBookHandler = (id: number) => {\n    setIsDeleteLoading(true);\n    deleteBook(id)\n      .then(() => {\n        setIsError(false);\n        setBooks((prevState) => (\n          [\n            ...prevState.filter(book => book.id !== id),\n          ]\n        ));\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setIsDeleteLoading(false));\n  };\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {!isLoading && isError && (\n        <p className=\"help is-danger\">Something went wrong.</p>\n      )}\n      {!isLoading && books.length === 0 && !isError && (\n        <p\n          className=\"help is-info\"\n        >\n          The list of books is empty! Add something to the list of books.\n        </p>\n      )}\n      {!isLoading && books.length > 0 && (\n        <table className=\"table is-hoverable is-fullwidth\">\n          <thead>\n            <tr>\n              <th>Book title</th>\n              <th>Author name</th>\n              <th>Category</th>\n              <th>\n                <abbr title=\"International Standard Book Number\">ISBN</abbr>\n              </th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tfoot>\n            <tr>\n              <th>Book title</th>\n              <th>Author name</th>\n              <th>Category</th>\n              <th>\n                <abbr title=\"International Standard Book Number\">ISBN</abbr>\n              </th>\n              <th>Actions</th>\n            </tr>\n          </tfoot>\n          <tbody>\n            {books.map(book => (\n              <tr key={book.id}>\n                <td>{book.title}</td>\n                <td>\n                  {book.authorName}\n                </td>\n                <td>{book.category}</td>\n                <td>{book.ISBN}</td>\n                <td>\n                  <button\n                    className=\"button mr-1 is-info is-light\"\n                    onClick={() => setEditedBook(book)}\n                    type=\"button\"\n                  >\n                    Edit\n                  </button>\n                  <button\n                    className={cn('button is-danger is-light',\n                      { 'is-loading': isDeleteLoading })}\n                    onClick={() => {\n                      deleteBookHandler(book.id);\n                    }}\n                    type=\"button\"\n                  >\n                    Delete\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n      <EditBookForm\n        setBooks={setBooks}\n        editedBook={editedBook}\n        setEditedBook={setEditedBook}\n      />\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const InputField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useMemo, useState } from 'react';\nimport cn from 'classnames';\nimport { Navigate } from 'react-router-dom';\nimport { InputField } from '../InputField/InputField';\nimport { addBook } from '../../api/api';\nimport { addedBook } from '../../api/Types/Book';\n\nexport const AddBookForm: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [authorName, setAuthorName] = useState('');\n  const [category, setCategory] = useState('Politics');\n  const [ISBN, setISBN] = useState('');\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [wasAdded, setWasAdded] = useState(false);\n\n  const isHasEmptyFields = useMemo(() => {\n    return title.length === 0 && title.length === 0 && ISBN.length === 0;\n  }, [title, authorName, ISBN]);\n\n  const clearForm = () => {\n    setTitle('');\n    setAuthorName('');\n    setCategory('Politics');\n    setISBN('');\n  };\n\n  const addBookHandler = () => {\n    setIsLoading(true);\n    const newBook: addedBook = {\n      title,\n      authorName,\n      category,\n      ISBN,\n    };\n\n    if (!isHasEmptyFields) {\n      addBook(newBook)\n        .then(() => {\n          setWasAdded(true);\n          setIsError(false);\n          clearForm();\n        })\n        .catch(() => setIsError(true))\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  };\n\n  return (\n    <>\n      {isError && (\n        <p className=\"help is-danger\">Something went wrong! Try again!</p>\n      )}\n      {wasAdded && (\n        <Navigate to=\"/\" replace />\n      )}\n      <form onSubmit={(event) => {\n        event.preventDefault();\n      }}\n      >\n        <InputField\n          name=\"Book title\"\n          value={title}\n          label=\"Book title\"\n          required\n          onChange={setTitle}\n        />\n        <InputField\n          name=\"Author name\"\n          value={authorName}\n          label=\"Author name\"\n          required\n          onChange={setAuthorName}\n        />\n        <div className=\"field\">\n          <label htmlFor=\"category\" className=\"label\">\n            Select category\n            <div className=\"control\">\n              <div className=\"select\">\n                <select\n                  id=\"category\"\n                  value={category}\n                  onChange={(event) => setCategory(event.target.value)}\n                >\n                  <option>Politics</option>\n                  <option>Fantasy</option>\n                  <option>Autobiography</option>\n                  <option>Romance</option>\n                </select>\n              </div>\n            </div>\n          </label>\n        </div>\n\n        <InputField\n          name=\"Enter ISBN\"\n          value={ISBN}\n          label=\"ISBN\"\n          required\n          onChange={setISBN}\n        />\n      </form>\n      <div className=\"field is-grouped is-grouped-centered mt-3\">\n        <p className=\"control\">\n          <button\n            type=\"button\"\n            className={cn('button is-primary', { 'is-loading': isLoading })}\n            disabled={isHasEmptyFields}\n            onClick={addBookHandler}\n          >\n            Submit\n          </button>\n        </p>\n        <p className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-light\"\n            onClick={() => clearForm()}\n          >\n            Clear form\n          </button>\n        </p>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nexport const PageNotFound: React.FC = () => {\n  return (\n    <h1>Page not found!</h1>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport {\n  Routes,\n  Route,\n  Link,\n  useLocation,\n} from 'react-router-dom';\nimport cn from 'classnames';\nimport { Dashboard } from './Components/Dashboard/Dashboard';\nimport { AddBookForm } from './Components/AddBookForm/AddBookForm';\nimport { PageNotFound } from './Components/PageNotFound/PageNotFound';\n\nexport const App: React.FC = () => {\n  const location = useLocation();\n\n  return (\n    <div className=\"app\">\n      <div className=\"tabs\">\n        <ul>\n          <li className={cn({ 'is-active': location.pathname === '/' })}>\n            <Link\n              to=\"/\"\n            >\n              Dashboard\n            </Link>\n          </li>\n          <li className={cn({ 'is-active': location.pathname === '/add' })}>\n            <Link\n              to=\"add\"\n            >\n              Add new book\n            </Link>\n          </li>\n        </ul>\n      </div>\n      <Routes>\n        <Route path=\"/\" element={<Dashboard />} />\n        <Route path=\"add\" element={<AddBookForm />} />\n        <Route path=\"*\" element={<PageNotFound />} />\n      </Routes>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}